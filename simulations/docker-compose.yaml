version: '3.7'
services:
  mysql:
    image: mysql:5.7 
    restart: always
    ports:
      - "3306:3306"
    container_name: mysql
    environment:
          - MYSQL_DATABASE=openmrs
          - MYSQL_ROOT_PASSWORD=debezium
          - MYSQL_USER=mysqluser
          - MYSQL_PASSWORD=mysqlpw
          - MYSQL_ROOT_HOST=%    # Allow docker containers to connect to mysql
    volumes:
        - ./mysql.cnf:/etc/mysql/conf.d/custom.cnf
        - ./dbdump:/docker-entrypoint-initdb.d
        - ./data:/var/lib/mysql

  openmrs:
    restart: "always"
    image: openmrs/openmrs-reference-application-distro:2.10.0
    container_name: openmrs  
    depends_on:
      - mysql
    ports:
      - "8080:8080"
    environment:
      DB_DATABASE: 'openmrs'
      DB_HOST: mysql
      DB_USERNAME: 'mysqluser'
      DB_PASSWORD: 'mysqlpw'
      #DB_CREATE_TABLES: 'true'
      #DB_AUTO_UPDATE: 'true'
      #MODULE_WEB_ADMIN: 'true'
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}  
    restart: always
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
    container_name: zookeeper

  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    container_name: kafka
    restart: always
    ports:
     - 9092:9092
     - 9999:9999
    depends_on:
     - zookeeper
    environment:
     - ADVERTISED_HOST_NAME=192.168.0.90 # Important - Please use your host IP to avoid socket error
     - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
     - KAFKA_COMPRESSION_TYPE=gzip
    # - KAFKA_NUM_PARTITIONS=8
     - ZOOKEEPER_CONNECT=zookeeper:2181
     - CREATE_TOPICS=dbserver1.openmrs.orders:1:1 # because ref app doesn't have records on orders
     - KAFKA_LOG_RETENTION_HOURS=-1
     - KAFKA_LOG_RETENTION_BYTES=-1

  connect:
    image: debezium/connect:${DEBEZIUM_VERSION}
    container_name: kafka-connect
   # network_mode: host
    ports:
     - "8083:8083"
    restart: always
    depends_on:
     - kafka
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     #- HOST_NAME=0.0.0.0  # Important - Please use your host IP to avoid socket error
     #- ADVERTISED_HOST_NAME=0.0.0.0 # Important - Please use your host IP to avoid socket error
     - REST_PORT=8083
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
     - KAFKA_DEBUG=true

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9191:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on: 
      - "kafka"

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    restart: always
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              connect:
                url: "http://kafka-connect:8083"
    ports:
      - 7777:8080
    links:
      - kafka
      - connect

  zoonavigator:
    container_name: zk-navigator
    restart: always
    image: elkozmon/zoonavigator:latest
    ports:
      - "5555:5555"
    environment:
      HTTP_PORT: 5555
      AUTO_CONNECT_CONNECTION_STRING: zookeeper:2181
  
  spark-master:
    image: bde2020/spark-master:2.4.5-hadoop2.7
    #network_mode: host
    container_name: spark-master
    ports:
      - "7077:7077"
      - "4040:4040"
    env_file:
      - .env
    environment:
      - INIT_DAEMON_STEP=setup_spark

  spark-worker-1:
    image: bde2020/spark-worker:2.4.5-hadoop2.7
    container_name: spark-worker-1
    #network_mode: host
    environment:
      - SPARK_WORKER_WEBUI_PORT=8781
      - SPARK_WORKER_PORT=2881
    ports:
      - "8781:8781"
      - "2881:2881"
    depends_on:
      - spark-master
    env_file:
      - .env