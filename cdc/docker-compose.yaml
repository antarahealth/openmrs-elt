version: '3.7'
services:
  mysql:
    image: mysql:5.7 
    restart: always
    ports:
      - "3306:3306"
    container_name: mysql
    environment:
          - MYSQL_DATABASE=openmrs
          - MYSQL_ROOT_PASSWORD=debezium
          - MYSQL_USER=mysqluser
          - MYSQL_PASSWORD=mysqlpw
          - MYSQL_ROOT_HOST=%    # Allow docker containers to connect to mysql
    volumes:
        - ./mysql.cnf:/etc/mysql/conf.d/custom.cnf
        - ./dbdump:/docker-entrypoint-initdb.d

  openmrs:
    restart: "always"
    image: openmrs/openmrs-reference-application-distro:latest
    container_name: openmrs  
    depends_on:
      - mysql
    ports:
      - "8080:8080"
    environment:
      DB_DATABASE: 'openmrs'
      DB_HOST: mysql
      DB_USERNAME: 'mysqluser'
      DB_PASSWORD: 'mysqlpw'
      #DB_CREATE_TABLES: 'true'
      #DB_AUTO_UPDATE: 'true'
      #MODULE_WEB_ADMIN: 'true'
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}  
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
    container_name: zookeeper

  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    container_name: kafka
    restart: always
    ports:
     - 9092:9092
     - 9999:9999
    expose:
     - 9092
     - 9999
    depends_on:
     - zookeeper
    environment:
     - ADVERTISED_HOST_NAME=192.168.0.105 # Important - Please use your host IP to avoid socket error
     - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
     - KAFKA_COMPRESSION_TYPE=gzip
     - KAFKA_NUM_PARTITIONS=8
     - ZOOKEEPER_CONNECT=zookeeper:2181
     - CREATE_TOPICS=dbserver1.openmrs.orders:1:1 # because ref app doesn't have records on orders

  connect:
    image: debezium/connect:${DEBEZIUM_VERSION}
    container_name: kafka-connect
    restart: always
    depends_on:
     - kafka
    ports:
     - 8083:8083
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
     - KAFKA_DEBUG=true

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: always
    ports:
      - "9191:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - "kafka"

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    restart: always
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              connect:
                url: "http://kafka-connect:8083"
    ports:
      - 7777:8080
    links:
      - kafka
      - connect

  zoonavigator:
    container_name: zk-navigator
    restart: always
    image: elkozmon/zoonavigator:latest
    ports:
      - "5555:5555"
    environment:
      HTTP_PORT: 5555
      AUTO_CONNECT_CONNECTION_STRING: zookeeper:2181
  

# other important containers - uncomment to install

  # portainer:
  #   container_name: portainer
  #   image: portainer/portainer
  #   networks:
  #     - dockernet   
  #   restart: "always"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   ports:
  #     - 9000:9000
 
  # kafka-schema-registry:
  #   container_name: kafka-schema-registry
  #   image: confluentinc/cp-schema-registry:4.0.0
  #   hostname: kafka-schema-registry
  #   restart: unless-stopped
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
  #     SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #   depends_on:
  #     - zookeeper
  #     - kafka

  # schema-registry-ui:
  #   container_name: schema-registry-ui
  #   image: landoop/schema-registry-ui:0.9.3
  #   hostname: kafka-schema-registry-ui
  #   ports:
  #     - "8001:8000"
  #   environment:
  #     SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
  #     PROXY: "true"
  #   depends_on:
  #     - kafka-schema-registry

  # kafka-rest-proxy:
  #   container_name: kafka-rest-proxy
  #   image: confluentinc/cp-kafka-rest:4.0.0
  #   hostname: kafka-rest-proxy
  #   ports:
  #     - "8082:8082"
  #   environment:
  #     KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
  #     KAFKA_REST_HOST_NAME: kafka-rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - kafka-schema-registry

  # kafka-topics-ui:
  #   container_name: kafka-topics-ui
  #   image: landoop/kafka-topics-ui
  #   hostname: kafka-topics-ui
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
  #     PROXY: "true"
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - kafka-schema-registry
  #     - kafka-rest-proxy

  # ksql-server:
  #   container_name: ksql-server
  #   image: "confluentinc/cp-ksql-server:5.2.2"
  #   ports:
  #     - 8088:8088
  #   depends_on:
  #     - kafka
  #     - kafka-schema-registry
  #   environment:
  #     KSQL_BOOTSTRAP_SERVERS: kafka:9092
  #     KSQL_LISTENERS: http://ksql-server:8088
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/

  # kafka_manager:
  #   image: hlebalbau/kafka-manager:stable
  #   container_name: kafka-manager 
  #   ports:
  #     - "8089:9000"
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   command: -Dpidfile.path=/dev/null
  #   environment:
  #     ZK_HOSTS: zookeeper:2181
  #     APPLICATION_SECRET: letmein
  #     KM_ARGS: -Djava.net.preferIPv4Stack=true

